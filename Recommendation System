# Importing packages

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import mean_squared_error
from sklearn.neighbors import NearestNeighbors
from sklearn.decomposition import TruncatedSVD


''' Loading Data

Load user-item interaction data
'''
ratings_df = pd.read_csv('ratings.csv')

# Load item metadata
items_df = pd.read_csv('items.csv')


''' Data Preprocessing

Create a matrix of user-item interactions '''
user_item_matrix = ratings_df.pivot(index='userId', columns='itemId', values='rating')

# Replace missing values with 0
user_item_matrix.fillna(0, inplace=True)

''' Building Recommendation Model

Create a TF-IDF vectorizer to transform item descriptions '''
vectorizer = TfidfVectorizer()

# Fit the vectorizer to the item descriptions and transform them into vectors
item_vectors = vectorizer.fit_transform(items_df['description'])

# Calculate the cosine similarity between item vectors
similarity_matrix = cosine_similarity(item_vectors)

# Create a nearest neighbors model to find similar items
nn_model = NearestNeighbors(n_neighbors=10, metric='cosine')
nn_model.fit(item_vectors)


''' Making Recommendations

Define a function to make recommendations for a given user
'''
def make_recommendations(user_id, num_recommendations):
    # Get the user's interaction history
    user_interactions = user_item_matrix.loc[user_id]

    # Get the indices of the items the user has interacted with
    interacted_item_indices = user_interactions[user_interactions > 0].index

    # Get the vectors of the items the user has interacted with
    interacted_item_vectors = item_vectors[interacted_item_indices]

    # Calculate the average vector of the items the user has interacted with
    average_vector = np.mean(interacted_item_vectors, axis=0)

    # Find the nearest neighbors to the average vector
    distances, indices = nn_model.kneighbors(average_vector.reshape(1, -1))

    # Get the indices of the recommended items
    recommended_item_indices = indices[0]

    # Get the titles of the recommended items
    recommended_item_titles = items_df.loc[recommended_item_indices, 'title']

    # Return the recommended item titles
    return recommended_item_titles[:num_recommendations]

# Making recommendations for a given user
user_id = 1
num_recommendations = 5
recommended_items = make_recommendations(user_id, num_recommendations)
print(recommended_items)

'''
This code uses the following techniques:

1. *Collaborative Filtering*: This technique is used to build a matrix of user-item interactions.
2. *Content-Based Filtering*: This technique is used to transform item descriptions into vectors using TF-IDF.
3. *Cosine Similarity*: This technique is used to calculate the similarity between item vectors.
4. *Nearest Neighbors*: This technique is used to find similar items to the ones a user has interacted with.
'''
# Importing packages

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import mean_squared_error
from sklearn.neighbors import NearestNeighbors
from sklearn.decomposition import TruncatedSVD


''' Loading Data

Load user-item interaction data
'''
ratings_df = pd.read_csv('ratings.csv')

# Load item metadata
items_df = pd.read_csv('items.csv')


''' Data Preprocessing

Create a matrix of user-item interactions '''
user_item_matrix = ratings_df.pivot(index='userId', columns='itemId', values='rating')

# Replace missing values with 0
user_item_matrix.fillna(0, inplace=True)

''' Building Recommendation Model

Create a TF-IDF vectorizer to transform item descriptions '''
vectorizer = TfidfVectorizer()

# Fit the vectorizer to the item descriptions and transform them into vectors
item_vectors = vectorizer.fit_transform(items_df['description'])

# Calculate the cosine similarity between item vectors
similarity_matrix = cosine_similarity(item_vectors)

# Create a nearest neighbors model to find similar items
nn_model = NearestNeighbors(n_neighbors=10, metric='cosine')
nn_model.fit(item_vectors)


''' Making Recommendations

Define a function to make recommendations for a given user
'''
def make_recommendations(user_id, num_recommendations):
    # Get the user's interaction history
    user_interactions = user_item_matrix.loc[user_id]

    # Get the indices of the items the user has interacted with
    interacted_item_indices = user_interactions[user_interactions > 0].index

    # Get the vectors of the items the user has interacted with
    interacted_item_vectors = item_vectors[interacted_item_indices]

    # Calculate the average vector of the items the user has interacted with
    average_vector = np.mean(interacted_item_vectors, axis=0)

    # Find the nearest neighbors to the average vector
    distances, indices = nn_model.kneighbors(average_vector.reshape(1, -1))

    # Get the indices of the recommended items
    recommended_item_indices = indices[0]

    # Get the titles of the recommended items
    recommended_item_titles = items_df.loc[recommended_item_indices, 'title']

    # Return the recommended item titles
    return recommended_item_titles[:num_recommendations]

# Making recommendations for a given user
user_id = 1
num_recommendations = 5
recommended_items = make_recommendations(user_id, num_recommendations)
print(recommended_items)

'''
This code uses the following techniques:

1. *Collaborative Filtering*: This technique is used to build a matrix of user-item interactions.
2. *Content-Based Filtering*: This technique is used to transform item descriptions into vectors using TF-IDF.
3. *Cosine Similarity*: This technique is used to calculate the similarity between item vectors.
4. *Nearest Neighbors*: This technique is used to find similar items to the ones a user has interacted with.
'''
